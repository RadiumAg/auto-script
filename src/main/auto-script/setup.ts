// Generated by Radium
import { resolve } from 'path';
import chrome from 'selenium-webdriver/chrome';
import { Builder, ThenableWebDriver } from 'selenium-webdriver';
import { Config } from '../config';
import { Await } from './type';
import { Run } from './scripts/Run';
import { Shopped } from './scripts/Shopped';
import { TickTok } from './scripts/ticktok';
import { TickTokCross } from './scripts/TicktokCross';

const serviceBuilder = new chrome.ServiceBuilder(
  resolve(__dirname, './chromedriver.exe'),
);

// eslint-disable-next-line import/no-mutable-exports
export let script: Run;
// eslint-disable-next-line import/no-mutable-exports
export let driver: Await<ThenableWebDriver>;

export async function resetScript() {
  await driver?.close?.();
  await driver?.quit?.();
  script?.stop?.();
  script = null;
  driver = null;
}

export async function buildScript() {
  const { scriptType } = await Config.getConfig();
  driver = await new Builder()
    .forBrowser('chrome')
    .setChromeService(serviceBuilder)
    .build();

  switch (scriptType) {
    case 'shopped':
      script = new Shopped(
        driver,
        ['https://seller.shopee.cn/webchat/conversations'],
        'https://seller.shopee.cn/account/signin?next=%2Fwebchat%2Fconversations',
      );
      break;

    case 'tiktok':
      script = new TickTok(
        driver,
        [
          'https://seller-th.tiktok.com/homepage?shop_region=TH',
          'https://seller-th.tiktok.com/account/welcome',
          'https://seller-th.tiktok.com/homepage?is_new_connect=0&need_local_region_check=1&shop_region=TH',
        ],
        'https://seller-th.tiktok.com/homepage',
      );
      break;

    case 'tiktok-cross':
      script = new TickTokCross(
        driver,
        [
          /https:\/\/seller\.tiktokglobalshop.com\/homepage/g,
          /https:\/\/seller\.tiktokglobalshop.com\/order/g,
        ],
        'https://seller.tiktokglobalshop.com/account/login',
      );
      break;

    default:
      break;
  }
}

export async function setup({
  key,
  message,
  waitTime,
}: {
  waitTime: number;
  key?: string;
  message?: string;
}) {
  try {
    await script.start(key, message, waitTime);
  } catch (e) {
    console.log(e instanceof Error && e.message);
    if (e instanceof Error) throw new Error(key);
  }
}
